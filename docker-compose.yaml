version: "3.8"

services:
  db:
    image: postgres:15
    container_name: db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - ${DB_PORT}:5432
    volumes:
      - ./db_data:/var/lib/postgresql/data
    networks:
      - detectify-network

  triton:
    image: nvcr.io/nvidia/tritonserver:23.03-py3
    container_name: triton
    command: tritonserver --model-repository=/models --log-verbose=1
    volumes:
      - ./model_repository:/models
    restart: always
    networks:
      - detectify-network

  backend:
    image: detectify-backend:latest
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - ${BACKEND_PORT}:8000
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - triton
    networks:
      - detectify-network
    command: [ "python", "main.py" ]

  frontend:
    image: detectify-frontend:latest
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - ${FRONTEND_PORT}:3000
    environment:
      - API_URL=${BACKEND_URL}
    depends_on:
      - backend
    networks:
      - detectify-network
    command: [ "pnpm", "start" ]

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - ${NGINX_PORT}:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend
    networks:
      - detectify-network

networks:
  detectify-network:
    driver: bridge
